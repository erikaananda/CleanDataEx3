my_name
paste(my_char, collapse = " ")
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"))
paste(1:3, c("X", "Y", "Z"), sep="")
paste(LETTERS, 1:4, sep= "-")
library(swirl)
rm(list = ls())
swirl()
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(x, y), 100)
my_data <- sample(c(y, z), 100)
y_na <- is.na(my_data)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect$bar
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) < c(4, 5)
dim(my_vector) <_ c(4, 5)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, 4, 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cname <- c("patient", "age", "weight", "bp", "rating", "test")
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data, cnames)
?colnames
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
5 != 7
! (5=7)
! (5==7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5>8 || 6 != 8 && 4> 3.9
isTRUE(6>4)
identical('twins', 'twins')
xor(5==6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2, 4, 5))
submit()
boring_function('My first function!')
boring_function
source('~/.active-rstudio-document')
submit()
my_mean(c(4, 5, 10))
source('/var/folders/qv/ds05pnpj59v_9t_46wy1zw5m0000gn/T//Rtmp8BvJpJ/remainder.R')
submit()
remainder(5)
remainder (11,5)
remainder (divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x) {x+1}, 6)
evaluate(function(x) {x[1]}, c(8, 4, 0))
evaluate(function(x) {x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("wazzup")
submit()
mad_libs(place = "Uranus", adjective = "stinky", noun = "toilet")
submit()
('I' %p% 'love') %p% 'R!'
'I' %p% 'love' %p% 'R!'
head(flage)
head(flags)
dim(flags)
viewinfo(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
cls_vect
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
unique_vals <- sapply(flags, unique)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, charater(1))
ok()
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace=T)
sample(1:6, 4, replace=TRUE)
sample(1:6, 4, replace=TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(c(1, 0), 100, replacement=TRUE, prob=c(.3, .7))
flips <- sample(c(1, 0), 100, replace=TRUE, prob=c(.3, .7))
flips <- sample(c(1, 0), 100, replace=TRUE, prob = c(0.3, 0.7))
flips <- sample(c(0, 1), 100, replace=TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
rbinom(100, size = 1, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean=100, sd = 25)
rpois(5, mean=10)
?rpois
rpois(5, 10)
replicate(100, rpois(5,10))
my_pois <- replicate(100, rpois(5,10))
my_pois
cm <- colMeans(my_pois)
cm
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
Sys.time()
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(t1)
t2 <- as.POSIXlt(Sys.time())
t2
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
cladd(t4)
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units='days')
data(cars)
?cars
head(cars)
summary(cars)
str(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist, xlab= "Speed")
plot(x = cars$speed, y = cars$dist, xlab= "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab= "Speed", ylab = "Stopping Distance")
plot(cars, main="My Plot")
plot(cars, sub="My Plot Subtitle")
plot(cars, col=2)
plot(cars, xlim = c(10,15))
plot(cars, pch=2
)
data(mtcars)
?boxplot
boxplot(mpg ~ cyl, mtcars)
hist(mtcars$mpg)
Sys.Date()
myM <- matrix(3, 3, c(1,0,5,2,1,6,3,4,0))
myM
?matrix
myM <- matrix(c(1,0,5,2,1,6,3,4,0), nrow=3, ncol=3)
myM
makeCacheMatrix <- function(m = matrix()) {
inv <<- NULL
get <- function() m
list(get = get)
}
cacheSolve <- function(x, ...) {
if(!is.null(inv)) {
message("getting cached data")
## Returns the cached data
return(inv)
}
data <- x$get()
inv <<- solve(data, ...)
## Return a matrix that is the inverse of 'x'
inv
}
cachesolve(myM)
cacheSolve(myM)
makeCacheMatrix(myM)
x <- makeCacheMatrix(myM)
cacheSolve(x)
cacheSolve(x)
install.packages("RMySQL")
library(RMySQL)
ucscDb <- dbConnect(MySQL(), user="genome",
host ="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb, "show databases;"); dbDisconnect(ucscDb);
result
ucscDb <- dbConnect(MySQL(), user="genome", db="hg19"
host ="genome-mysql.cse.ucsc.edu")
ucscDb <- dbConnect(MySQL(), user="genome", db="hg19",
host ="genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(hg19)
length(allTables)
head(dbListTables(hg19))
ucscDb
?dbListTables
allTables <- dbListTables(ucscDb, hg19)
length(allTables)
?dbListFields()
?dbListFields
dbListFields(ucscDb, hg19, "affyU133Plus2")
dbListFields(ucscDb, "affyU133Plus2")
dbGetQuery(ucscDb, "select count(*) from affyU133Plus2")
affyData <- dbReadTable(ucscDbm , "affyU133Plus2")
affyData <- dbReadTable(ucscDb , "affyU133Plus2")
head(affyData)
query <- dbSendQuery(ucscDbm "select * from addyU133Plus2 where misMatches between 1 and 3")
query <- dbSendQuery(ucscDbm, "select * from addyU133Plus2 where misMatches between 1 and 3")
query <- dbSendQuery(ucscDb, "select * from addyU133Plus2 where misMatches between 1 and 3")
query <- dbSendQuery(ucscDb, "select * from affyU133Plus2 where misMatches between 1 and 3")
warnings()
affyMis <- fetch(query); quantile(affyMis$misMatches)
affyMisSmall <- fetch(query, n=10); dbClearResult(query);
dim(affyMisSmall)
dbDisconnect(ucscDb);
source("http://bioconductor.org/biocLite.R")
biocLite("rdhf5")
library(rdhf5)
source("http://bioconductor.org/biocLite.R")
library(rdhf5)
biocLite("rdhf5")
biocLite("BiocUpgrade")
biocLite("BiocUpgrade", type=source)
biocLite("rdhf5", type=source)
biocLite("rdhf5", type="source")
source("http://bioconductor.org/biocLite.R")
biocLite("BiocUpgrade", type=source)
library(ggplot2)
str(mpg)
install.packages("ggplot2")
library(ggplot2)
str(mpg)
qplot(displ, hwy, data=mpg)
qplot(displ, hwy, data=mpg, color = drv)
qplot(displ, hwy, data=mpg, geom = c("point", "smooth"))
qplot(hwy, data=mpg, fill = drv
)
qplot(displ, hwy, data=mpg, facets = drv)
qplot(displ, hwy, data=mpg, facets = ~drv)
qplot(displ, hwy, data=mpg, facets = .~drv)
qplot(displ, hwy, data=mpg, facets = ~drv)
qplot(hwy, data=mpg, facets = drv ~ ., binwidth = 2)
qplot(hwy, data=mpg, facets = drv ~ ., binwidth = 1)
str(maacs)
?xyplot
install.packages("lattice")
library(lattice)
?xyplot
library(nlme)
xyplot(weight ~ Time | Diet, BodyWeight)
head(BodyWeight)
str(BodyWeight)
library(datasets)
data(airquality)
?qplot
library(ggplot2)
str(airquality)
qplot(Ozone, Wind, data = airquality,
facets - . ~ Month, geom = c("point", "smooth"), method = "lm")
qplot(Ozone, Wind, data = airquality,
facets - . ~ Month)
qplot(Ozone, Wind, data = airquality,
facets = . ~ Month)
qplot(Ozone, Wind, data = airquality,
facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Ozone, Wind, data = airquality,
facets = . ~ Month)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(displ, hwy, data=mpg, geom = c("point", "smooth"))
qplot(displ, hwy, data=mpg) + geom_smooth())
qplot(displ, hwy, data=mpg) + geom_smooth()
qplot(displ, hwy, data=mpg) + stats_smooth("loess")
#subsetting
set.seed(13435)
X <- data.frame("var1"=sample(1:5), "var2"=sample(6:10), "var3"=sample(11:15))
X <- X[sample(1:5), ]; x$var2[c(1.3)] = NA
X
sample(1:5)
X[, 1]
X[,"var1"]
X[1:2, "var2"]
X([X$var1<=3 | Xvar3 >15], )
X[(X$var1<=3 | Xvar3 >15), ]
X[(X$var1<=3 | X$var3 >15), ]
X[which(X$var>8),]
X[which(X$var2>8),]
X[X$var2>8,]
sort(X$var2)
sort(X$var2, decreasing = T, na.last = T)
X
X <- X[sample(1:5), ]; x$var2[c(1.3)] = NA
X <- X[sample(1:5), ]; x$var2[c(1,3)] = NA
set.seed(13435)
X <- data.frame("var1"=sample(1:5), "var2"=sample(6:10), "var3"=sample(11:15))
X <- X[sample(1:5), ]; x$var2[c(1,3)] = NA
X <- X[sample(1:5), ]
X$var2[c(1,3)] = NA
X
X[which(X$var2>8),]
X[X$var2>8,]
sort(X$var2)
sort(X$var2, decreasing = T, na.last = T)
X[order(X$var1),]
X[order(X$var1, X$var3),]
install.packages("plyr")
install.packages("plyr")
install.packages("plyr")
install.packages("plyr")
library(plyr)
source('~/.active-rstudio-document')
arrange(X, var1)
arrange(X, desc(var1))
X$var4 <-rnorm(5)
Y <- cbind(X, rnorm(5))
Y
library(dplyr)
GDP <- read.csv("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", header = T, skip =3)
CtryDat <- read.csv("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv ")
names(GDP)
GDP <- rename(GDP, shortname = Economy)
names(GDP)
mergedData = merge(GDP, CtryDat, by.x="shortname", by.y="Short.Name")
dim(mergedData)
GDP <- filter(GDP, Ranking %in% 1:190)
dim(GDP)
mergedData = merge(GDP, CtryDat, by.x="shortname", by.y="Short.Name")
dim(mergedData)
GDP <- rename(GDP, shortcode = X)
mergedData = merge(GDP, CtryDat, by.x="shortcode", by.y="CountryCode")
dim(mergedData)
head(mergedData$Ranking)
mergedData <- arrange(mergedData, desc(Ranking)
head(mergedData$Ranking)
mergedData <- arrange(mergedData, desc(Ranking))
head(mergedData$Ranking)
mergedData <- arrange(mergedData, desc(as.numeric(Ranking)) )
head(mergedData$Ranking)
mergedData$numRank = as.integer(Ranking)
mergedData$numRank = as.integer(mergedData$Ranking)
mergedData <- arrange(mergedData, desc(numRank) )
head(mergedData$numRank)
head(c(mergedData$Short.Name, mergedData$numRank, n=13)
)
mergedData[11:14, Short.Name]
mergedData[11:14, ]
head(mergedData[ , 1:3], n=13)
mergedData <- arrange(mergedData, desc(numRank) )
head(mergedData)
mergedData <- mutate(mergedData, Ranking = as.numeric(Ranking))
head(mergedData)
head(mergedData[ , 1:3], n=13)
mergedData = merge(GDP, CtryDat, by.x="shortcode", by.y="CountryCode")
dim(mergedData)
head(mergedData[ , 1:3], n=13)
mergedData <- mutate(mergedData, Ranking = as.numeric(Ranking))
mergedData <- arrange(mergedData, desc(Ranking) )
head(mergedData[ , 1:3], n=13)
mergedData = merge(GDP, CtryDat, by.x="shortcode", by.y="CountryCode")
dim(mergedData)
mergedData[1:2, ]
mergedData[,1:2 ]
summary(mergedData[, 1:2])
mergedData[mergedData$Ranking %in% c(191, 190, 189), ]
mergedData[mergedData$Ranking %in% c(191, 190, 189), 1:2]
mergedData[mergedData$Ranking %in% c(191:170), 1:2]
arrange(mergedData[mergedData$Ranking %in% c(191:170), 1:2], desc(Ranking)
)
arrange(mergedData[mergedData$Ranking == 178, ], desc(Ranking))
arrange(mergedData[mergedData$Ranking == 178, ], desc(Ranking))
names(GDP)
GDP[shortname %in% c("High income: OECD", "High income: nonOECD"), ]
names(GDP)
mergedData[Income.Group %in% c("High income: OECD", "High income: nonOECD"), ]
names(mergedData)
mergedData[mergedData$Income.Group %in% c("High income: OECD", "High income: nonOECD"), ]
mergedData[mergedData$Income.Group %in% c("High income: OECD", "High income: nonOECD"), Ranking]
mergedData[mergedData$Income.Group %in% c("High income: OECD", "High income: nonOECD"), mergedData$Ranking]
mergedData[mergedData$Income.Group %in% c("High income: OECD", "High income: nonOECD"), mergedData$Ranking]
mergedData[mergedData$Income.Group %in% c("High income: OECD", "High income: nonOECD"), 1:5 ]
mergedData[mergedData$Income.Group == "High income: OECD", 2 ]
meanOECD <- mean(as.numeric(mergedData[mergedData$Income.Group %in% c("High income: OECD", "High income: nonOECD"), 2]))
meanOECD
meanOECD <- mean(as.numeric(mergedData[mergedData$Income.Group == "High income: OECD"), 2]))
meanOECD <- mean(as.numeric(mergedData[mergedData$Income.Group == "High income: OECD"), 2])
meanOECD <- mean(as.numeric(mergedData[mergedData$Income.Group == "High income: OECD", 2]))
meanOECD
as.numeric(mergedData[mergedData$Income.Group == "High income: OECD", 2])
o <- as.numeric(mergedData[mergedData$Income.Group == "High income: OECD", 2])
mean(o)
o <- group_by(mergedData, Income.Group)
str(o)
summarize(o, Ranking = mean(Raking, na.rm = T))
summarize(o, Ranking = mean(Ranking, na.rm = T))
